#!/usr/bin/env python

import sys
import yaml
import subprocess as sp
from pprint import pprint
from itertools import product
import logging
import signal


FORMAT = '%(asctime)-15s %(message)s'
logging.basicConfig(
    format=FORMAT, level=logging.INFO, filename="multirun.log")


def load_config(config_path):
    with open(config_path, "r") as fp:
        return yaml.load(fp.read())


def get_param(key):
    pname = key
    pname = pname.replace("_", "-")
    if len(pname) == 1:
        pname = "-" + pname
    else:
        pname = "--" + pname
    return pname


class EvalEnviron(object):

    def __init__(self, mapping):
        self.mapping = mapping

    def keys(self):
        return self.mapping.keys()

    def __getitem__(self, key):
        v = self.mapping[key]
        if isinstance(v, str):
            open_idx = v.find("{{")
            close_idx = v.find("}}")
            if open_idx >= 0:
                to_eval = v[open_idx+2:close_idx]
                evaluated = eval(to_eval, {}, self)
                return evaluated
        return v


def build_args(global_config):
        arguments = []
        for config in global_config['configurations']:
            values = []
            for param_values in config.values():
                if isinstance(param_values, list):
                    values.append(param_values)
                else:
                    values.append([param_values])
            for vals in product(*values):
                environ = EvalEnviron(dict(zip(config.keys(), vals)))
                argument_combination = []
                for k in environ.keys():
                    argument_combination.append(get_param(k))
                    v = environ[k]
                    if not isinstance(v, bool):
                        argument_combination.append(v)
                arguments.append([str(t) for t in argument_combination])
        return arguments


class JavaCommands(object):

    logger = logging.getLogger("JavaCommands")
    
    def __init__(self, config):
        assert config['command'] == 'java'
        self.basic_command_line = ['java']
        with open(config.get('classpath_file', '.classpath')) as fp:
            classpath = fp.read().strip()
        self.basic_command_line.extend([
            '-cp', classpath,
        ])
        properties = config['properties']
        for prop in properties:
            self.basic_command_line.append(
                "-D{}={}".format(
                    prop, properties[prop]))
        self.basic_command_line.append(config['class'])
        self.args = build_args(config)
        
    def run(self):
        for arguments in self.args:
            cmdline = self.basic_command_line + arguments
            JavaCommands.logger.info("Running %s", arguments)
            process_result = sp.run(cmdline)
            if process_result.returncode != 0:
                JavaCommands.logger.error(
                    "Command failed with %d error", process_result.returncode)
            else:
                JavaCommands.logger.info("Command completed successfully")


def signal_handler(signal, frame):
    logging.warn('Interrupting execution')
    sys.exit(0)


def main():
    signal.signal(signal.SIGINT, signal_handler)
    config_path = sys.argv[1]
    config = load_config(config_path)
    if config['command'] == 'java':
        commands = JavaCommands(config)

    commands.run()


if __name__ == '__main__':
    main()
